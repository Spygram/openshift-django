apiVersion: v1
kind: BuildConfig
metadata:
  name: djangopipeline
  labels:
    name: djangopipeline
  annotations:
    pipeline.alpha.openshift.io/uses: '[{"name": "openshift-django", "namespace": "", "kind": "DeploymentConfig"}]'
spec:
  triggers:
    -
      type: GitHub
      github:
        secret: secret101
    -
      type: Generic
      generic:
        secret: secret101
  runPolicy: Serial
  source:
    type: None
  strategy:
    type: JenkinsPipeline
    env:
      - name: DEV_PROJECT
        value: new-dev
      - name: STAGE_PROJECT
        value: new-stage
    jenkinsPipelineStrategy:
      jenkinsfile: |-
          def openshiftDjangoRepo="https://raw.githubusercontent.com/ruddra/openshift-django/develop/.openshift/templates/openshift-django.yaml"
          def stageTag="promoteToQA"

          pipeline{
            agent { label ""}
            stages{
              stage('Create in DEV') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        echo "checking openshift django exists in DEV"
                        return !openshift.selector("bc", "openshift-django").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        def app = openshift.newApp(openshiftDjangoRepo).narrow("svc").expose();
                        def dc = openshift.selector("dc", "openshift-django")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                              sleep 10
                        }
                        openshift.set("triggers", "dc/openshift-django", "--manual")
                      }
                    }
                  }
                }
              }
              stage('Build and Test in DEV'){
                steps {
                  script {
                      openshiftBuild(namespace: "${env.DEV_PROJECT}", buildConfig: "openshift-django", showBuildLogs: 'true',  waitTime: "600000")
                  }
                }
              }
              stage('Rollout to DEV') {
                steps {
                  script {
                    openshiftDeploy(namespace: "${env.DEV_PROJECT}", deploymentConfig: "openshift-django", waitTime: "600000")
                  }
                }
              }
              stage('Scale in DEV') {
                steps {
                  script {
                    openshiftScale(namespace: "${env.DEV_PROJECT}", deploymentConfig: "openshift-django", replicaCount: '2')
                  }
                }
              }
              stage('Promote to STAGE?') {
                steps {
                  timeout(time:15, unit:'MINUTES') {
                      input message: "Promote to STAGE?", ok: "Promote"
                  }

                  script {
                    openshift.withCluster() {
                      openshift.tag("${env.DEV_PROJECT}/openshift-django:latest", "${env.STAGE_PROJECT}/openshift-django:${stageTag}")
                    }
                  }
                }
              }
              stage("Clean Up STAGE") {
                steps {
                  script {
                      openshift.withCluster() {
                        openshift.withProject(env.STAGE_PROJECT) {
                          if (openshift.selector('dc', 'openshift-django').exists()) {
                            openshift.selector('dc', 'openshift-django').delete()
                            openshift.selector('svc', 'openshift-django').delete()
                            openshift.selector('route', 'openshift-django').delete()
                         }
                       }
                    }
                  }
                }
              }
              stage('Rollout to STAGE') {
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.STAGE_PROJECT) {
                        openshift.newApp("openshift-django:${stageTag}").narrow("svc").expose()
                    }
                  }
                }
              }
            }
            stage('Scale in STAGE') {
                steps {
                  script {
                    openshiftScale(namespace: "${env.STAGE_PROJECT}", deploymentConfig: "openshift-django", replicaCount: '3')
                  }
                }
              }
            }
          }
  output:
  resources:
  postCommit:
