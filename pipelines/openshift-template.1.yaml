apiVersion: v1
kind: Template
labels:
  template: cicd
  group: cicd
metadata:
  annotations:
    iconClass: icon-jenkins
    tags: instant-app,jenkins,gogs,nexus,cicd
parameters:
- displayName: Project Name
  value: openshift-django
  name: PROJECT_NAME
- displayName: Stage Server
  value: stage
  name: STAGE_SERVER
- displayName: Test Server
  value: test
  name: TEST_SERVER
- displayName: Source Repo
  value: https://github.com/ruddra/openshift-django.git#develop
  name: GIT_REP
objects:
- apiVersion: v1
  kind: BuildConfig

  metadata:
    name: django-pipeline
    labels:
      name: django-pipeline
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "${PROJECT_NAME}", "namespace": "", "kind": "DeploymentConfig"}]'
  spec:
    triggers:
      -
        type: GitHub
        github:
          secret: secret101
      -
        type: Generic
        generic:
          secret: secret101
    runPolicy: Serial
    source:
      type: None
    strategy:
      type: JenkinsPipeline
      jenkinsPipelineStrategy:
      jenkinsfile: |-
            pipeline {
              agent {
                label 'python'
              }
              stages {
                stage('Build App') {
                  steps {
                    git branch: 'develop', url: 'https://github.com/ruddra/openshift-django.git'

                    sh "./run-build.sh"
                  }
                }
                stage('Test') {
                  steps {
                    sh "./run-tests.sh"
                  }
                }
                stage('Code Analysis') {
                  steps {
                    script {
                      sh "sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -Dsonar.sources=."
                    }
                  }
                }

              stage('Deploy to Test') {
                openshiftDeploy(deploymentConfig: '${PROJECT_NAME}', namespace='${TEST_SERVER}')
              }
              stage('Deploy to Stage') {
                openshiftTag(namespace: '${TEST_SERVER}', sourceStream: '${PROJECT_NAME}',  sourceTag: 'latest', destinationStream: '${PROJECT_NAME}', destinationTag: 'promoteToQA')
                openshiftDeploy(namespace: '${STAGE_SERVER}', deploymentConfig: '${PROJECT_NAME}', )
                openshiftScale(namespace: '${STAGE_SERVER}', deploymentConfig: '${PROJECT_NAME}', replicaCount: '3')
              }

- apiVersion: batch/v1
  kind: Job
  metadata:
    name: Django-installer
  spec:
    activeDeadlineSeconds: 1000
    completions: 1
    parallelism: 1
    template:
      spec:
        containers:
        - env:
          - name: CICD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          command:
          - /bin/bash
          - -x
          - -c
          - |
            oc project ${TEST_SERVER}
            oc new-app ${GIT_REP} name=${PROJECT_NAME}
            oc new-app openshift/mysql-55-centos7 \
                 -e MYSQL_USER=myroot \
                 -e MYSQL_PASSWORD=myroot123 \
                 -e MYSQL_DATABASE=mydjango
            oc volumes dc/${PROJECT_NAME} --add \
              --name 'p-vol-1' \
              --type 'pvc' \
              --mount-path '/data/' \
              --claim-name 'pv-django' \
              --claim-size '1G' \
              --overwrite
            oc project ${TEST_SERVER}
            oc new-app ${GIT_REP} name=${PROJECT_NAME}
            oc new-app openshift/mysql-55-centos7 \
                 -e MYSQL_USER=myroot \
                 -e MYSQL_PASSWORD=myroot123 \
                 -e MYSQL_DATABASE=mydjango
            oc volumes dc/${PROJECT_NAME} --add \
              --name 'p-vol-1' \
              --type 'pvc' \
              --mount-path '/data/' \
              --claim-name 'pv-django' \
              --claim-size '1G' \
              --overwrite




